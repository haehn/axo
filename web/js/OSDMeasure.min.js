 class $9aede8581b16c941$var$DexieWrapper {
    db;
    plugin;
     constructor(plugin){
        this.plugin = plugin;
        this.db = new Dexie("database");
        this.db.version(3).stores({
            measurements: `
                id,
                image,
                p1x, p1y,
                p2x, p2y,
                name,
                color`
        });
        this.db.open();
    }
    clear() {
        this.db.measurements.clear();
    }
     async getAllMeasurements(imageIdentifier) {
        let measurements = [];
        // query all measurements related to the image
        let result = await this.db.measurements.where("image").equals(imageIdentifier).toArray();
        for(let i = 0; i < result.length; i++){
            let measurement = new $9aede8581b16c941$var$Measurement(new $9aede8581b16c941$var$Point(result[i].p1x, result[i].p1y, result[i].color, this.plugin.fabricCanvas, this.imageIdentifier), new $9aede8581b16c941$var$Point(result[i].p2x, result[i].p2y, result[i].color, this.plugin.fabricCanvas, this.imageIdentifier), result[i].name, result[i].color, this.plugin.conversionFactor, this.plugin.units, this.plugin.fabricCanvas, this.imageIdentifier);
            measurement.id = result[i].id;
            measurements.push(measurement);
        }
        return measurements;
    }
     async removeMeasurement(measurement, imageIdentifier) {
        await this.db.measurements.delete(measurement.id, imageIdentifier);
    }
    saveAll(measurements, imageIdentifier) {
        for(let i = 0; i < measurements.length; i++)this.saveMeasurement(measurements[i], imageIdentifier);
    }
    saveMeasurement(measurement, imageIdentifier) {
        this.db.measurements.put({
            id: measurement.id,
            image: imageIdentifier,
            p1x: measurement.p1.x,
            p1y: measurement.p1.y,
            p2x: measurement.p2.x,
            p2y: measurement.p2.y,
            name: measurement.name,
            color: measurement.color
        });
    }
}
 class OSDMeasure {
    viewer;
    overlay;
    fabricCanvas;
    db;
    /**
     * Flags
     */ isMeasuring;
    useBuiltInUI;
    /**
     * Data
     */ measurements;
    p1;
    p2;
    redoStack;
    conversionFactor;
    measurementColor;
    menuOptions;
    units;
    imageIdentifier;
    measurementIdCounter;
    measurementList = null;
    constructor(viewer, options = {}){
        this.viewer = viewer;
        this.processOptions(options);
        // pull in the two libraries
        this.overlay = viewer.fabricjsOverlay();
        this.fabricCanvas = this.overlay.fabricCanvas();
        this.viewer.gestureSettingsMouse.clickToZoom = false;
        this.viewer.gestureSettingsTouch.clickToZoom = false;
        this.isMeasuring = false; // toggles when user places first point of a measurement
        // the two points used to measure - these are image coordinates
        this.p1 = null;
        this.p2 = null;
        // store all the measurements (and extraneous points)
        this.measurements = [];
        // temporarily stores undone measurements
        this.redoStack = [];
        // initialize databasse
        this.db = new $9aede8581b16c941$var$DexieWrapper(this);
        this.measurementList = new $9aede8581b16c941$var$MeasurementList(this);
        this.imageIdentifier = this.viewer.tileSources[this.viewer.currentPage()];
        this.viewer.addHandler("page", (event)=>{
            this.updateImageIdentifier(event);
            this.clearCanvas();
            this.loadFromLocalStorage(this.imageIdentifier);
        });
        // add our custom handler for measurements
        this.viewer.addHandler("canvas-double-click", (event)=>{
            this.addMeasurement(event);
            if (!event.quick) event.preventDefaultAction = true;
        });
        // re-render on page event (change in zoom)
        this.viewer.addHandler("zoom", this.adjustToZoom.bind(this));
        // re-render on rotation
        this.viewer.addHandler("rotate", ()=>{
            this.viewer.viewport.rotateTo(0);
        });
        // dispatch correct method on key press
        document.addEventListener("keydown", (event)=>{
            this.handleKeyPress(event);
        });
        this.loadFromLocalStorage();
        this.measurementIdCounter = 0;

    // Add a click event listener to select a measurement when clicked
    this.viewer.addHandler("canvas-click", (event) => {
        const webPoint = event.position;
        const viewportPoint = this.viewer.viewport.pointFromPixel(webPoint);
        const imagePoint = this.viewer.viewport.viewportToImageCoordinates(viewportPoint);

       for (let i = 0; i < this.measurements.length; i++) {
                   if (this.measurements[i].isPointInside(imagePoint.x, imagePoint.y)) {
                       // Check if the clicked measurement is the same as the selectedMeasurement
                       if (this.selectedMeasurement === this.measurements[i]) {
                           // If it is, deselect it
                           this.deselectMeasurement();
                       } else {
                           // If it's not, select it
                           this.selectMeasurement(this.measurements[i]);
                       }
                       break;
           }
        }
    });

    }
    updateImageIdentifier(event) {
        this.imageIdentifier = this.viewer.tileSources[this.viewer.currentPage()];
    }
    clearCanvas() {
        this.fabricCanvas.clear();
        for(let i = 0; i < this.measurements.length; i++)this.measurements[i].remove();
        this.measurements = [];
        this.redoStack = [];
        if (this.isMeasuring) this.p1.remove();
        this.p1 = null;
        this.p2 = null;
        this.isMeasuring = false;
        document.dispatchEvent(new Event("measurements-reset"));
    }
    addMeasurement(event) {
        let webPoint = event.position;
        let viewportPoint = this.viewer.viewport.pointFromPixel(webPoint);
        let imagePoint = this.viewer.viewport.viewportToImageCoordinates(viewportPoint);
        let zoom = this.viewer.viewport.getZoom();
        if (this.isMeasuring) {
            this.p2 = new $9aede8581b16c941$var$Point(imagePoint.x, imagePoint.y, this.measurementColor, this.fabricCanvas, this.imageIdentifier);
            this.p2.render(zoom);
            let measurement = new $9aede8581b16c941$var$Measurement(this.p1, this.p2, `M${this.measurements.length + 1}`, this.measurementColor, this.conversionFactor, this.units, this.fabricCanvas, this.imageIdentifier);
            measurement.render(zoom);
            this.measurements.push(measurement);
            measurement.id = this.measurementIdCounter++;
            measurement.imageIdentifier = this.imageIdentifier;
            this.saveInLocalStorage(this.imageIdentifier);
            // dispatch an event to let it be known there is a new measurement
            document.dispatchEvent(new Event("measurement-added"));
        } else {
            this.p1 = new $9aede8581b16c941$var$Point(imagePoint.x, imagePoint.y, this.measurementColor, this.fabricCanvas, this.imageIdentifier);
            this.p1.render(zoom);
        }
        // have to blow out the redo stack since we made a new measurement
        this.redoStack = [];
        this.isMeasuring = !this.isMeasuring;
    }
    deleteSelectedMeasurement() {
        if (this.selectedMeasurement) {
            const measurementIndex = this.measurements.indexOf(this.selectedMeasurement);
            console.log(measurementIndex);
            if (measurementIndex !== -1) {
                // Remove it from the canvas
                this.selectedMeasurement.remove();

                // Remove it from the list
                this.measurements.splice(measurementIndex, 1);

                // Remove it from the database
                this.redoStack.push(this.selectedMeasurement);
                this.db.removeMeasurement(this.selectedMeasurement, this.imageIdentifier);
                this.saveInLocalStorage(this.imageIdentifier);
                // Dispatch a custom event with a parameter
                const event = new CustomEvent("delete-selected-measurement", {
                    detail: {
                      measurement: this.selectedMeasurement
                     }
                });
                document.dispatchEvent(event);

                this.deselectMeasurement(); // Deselect the deleted measurement
            }
        }
    }
     // Add a method to handle measurement selection
      selectMeasurement(measurement) {
          // Deselect the previously selected measurement (if any)
          if (this.selectedMeasurement) {
              this.deselectMeasurement();
          }

          this.selectedMeasurement = measurement;
          this.selectedMeasurement.select();
      }
      // Add a method to deselect the currently selected measurement
      deselectMeasurement() {
          if (this.selectedMeasurement) {
              this.selectedMeasurement.deselect();
              this.selectedMeasurement = null;
          }
      }
     adjustToZoom() {
        let zoom = this.viewer.viewport.getZoom();
        for(let i = 0; i < this.measurements.length; i++)this.measurements[i].adjustToZoom(zoom);
        if (this.p1 != null) this.p1.adjustToZoom(zoom);
        if (this.p2 != null) this.p2.adjustToZoom(zoom);
    }
     clear() {
        this.db.clear();
        for(let i = 0; i < this.measurements.length; i++)this.measurements[i].remove();
        this.measurements = [];
        this.redoStack = [];
        if (this.isMeasuring) this.p1.remove();
        this.p1 = null;
        this.p2 = null;
        this.isMeasuring = false;
        document.dispatchEvent(new Event("measurements-reset"));
    }
     exportCSV() {
        let header = [
            "Name",
            "Point 1 X",
            "Point 1 Y",
            "Point 2 X",
            "Point 2 Y",
            "Distance(mm)"
        ];
        let createRow = (measurement)=>{
            return [
                measurement.name,
                measurement.p1.x,
                measurement.p1.y,
                measurement.p2.x,
                measurement.p2.y,
                measurement.distance
            ];
        };
        // generate the rows
        let rows = [
            header
        ];
        for(let i = 0; i < this.measurements.length; i++)rows.push(createRow(this.measurements[i]));
        // join the rows together
        let csv = "data:text/csv;charset=utf-8," + rows.map((row)=>row.join(",")).join("\n");
        // encode to URI
        let uri = encodeURI(csv);
        // download using invisible link trick
        let link = document.createElement("a");
        link.setAttribute("href", uri);
        link.setAttribute("download", "measurements.csv");
        document.body.appendChild(link);
        link.click();
        // clean up
        document.body.removeChild(link);
    }
     handleKeyPress(event) {
        // reset
        if (event.ctrlKey && event.key == "r") {
            if (window.confirm("Are you sure you want to reset all measurements and annotations?")) this.clear();
        } else if (event.ctrlKey && event.key == "z") this.undo();
        else if (event.ctrlKey && event.key == "y") this.redo();
        else if (event.ctrlKey && event.key == "s") this.exportCSV();
        else if(event.ctrlKey && event.key == "d") this.deleteSelectedMeasurement();
        else if (event.key == "Escape") this.deselectMeasurement();
        // override ctrl presses
        if (event.ctrlKey) event.preventDefault();
    }
     async loadFromLocalStorage(imageIdentifier) {
        this.measurements = await this.db.getAllMeasurements(this.imageIdentifier);
        this.setMeasurementColor(localStorage.getItem("color"));
        document.dispatchEvent(new Event("data-loaded"));
        // render the measurements
        this.renderAllMeasurements();
    }
     processOptions(options) {
        if (options.conversionFactor) this.conversionFactor = options.conversionFactor;
        else this.conversionFactor = 1;
        if (options.units) this.units = options.units;
        else this.units = "px";
        if (options.measurementColor) this.measurementColor = options.measurementColor;
        else this.measurementColor = "#000000";
        if (options.useBuiltInUI) {
            let ui = new $9aede8581b16c941$var$UI(this);
            ui.addToDocument();
        }
    }
    redo() {
        if (this.redoStack.length > 0) {
            let lastObject = this.redoStack.pop();
            // get zoom level for rendering
            let zoom = this.viewer.viewport.getZoom();
            // if it's a point, handle it as such
            if (lastObject instanceof $9aede8581b16c941$var$Point) {
                this.p1 = lastObject;
                this.p1.render(zoom);
                // set isMeasuring so the next double-click finishes the measurement
                this.isMeasuring = true;
            } else {
                this.measurements.push(lastObject);
                lastObject.id = this.measurements.length - 1;
                lastObject.p1.render(zoom);
                lastObject.p2.render(zoom);
                lastObject.render(zoom);
                // can't forget to save!
                this.saveInLocalStorage(this.imageIdentifier);
                // dispatch event to replace it in the measurement list
                document.dispatchEvent(new Event("measurement-added"));
            }
        }
    }
    renderAllMeasurements() {
        let zoom = this.viewer.viewport.getZoom();
        for(let i = 0; i < this.measurements.length; i++){
            this.measurements[i].p1.render(zoom);
            this.measurements[i].p2.render(zoom);
            this.measurements[i].render(zoom);
        }
        if (this.isMeasuring && this.p1 != null) this.p1.render(zoom);
    }
     saveInLocalStorage(imageIdentifier) {
        this.db.saveAll(this.measurements, imageIdentifier);
        localStorage.setItem("color", this.measurementColor);
    }
    setMeasurementColor(color) {
        this.measurementColor = color;
        if (this.isMeasuring) {
            // have to re-color the marking already placed
            this.p1.color = this.measurementColor;
            this.p1.fabricObject.fill = this.measurementColor;
            this.fabricCanvas.renderAll();
        }
        this.saveInLocalStorage(this.imageIdentifier);
    }
     async undo() {
        if (this.isMeasuring) {
            // store the point for redo
            this.redoStack.push(this.p1);
            this.p1.remove();
            this.p1 = null;
            this.isMeasuring = !this.isMeasuring;
        } else if (this.measurements.length > 0) {
            // pop out of measurements and into redoStack
            let measurement = this.measurements.pop();
            measurement.remove();
            this.redoStack.push(measurement);
            await this.db.removeMeasurement(measurement);
            this.saveInLocalStorage(this.imageIdentifier);
            document.dispatchEvent(new Event("measurement-removed"));
        }
    }
}
 class $9aede8581b16c941$var$Measurement {
    id;
    p1;
    p2;
    name;
    color;
    distance;
    conversionFactor;
    units;
    imageIdentifier;
    fabricCanvas;
    line;
    textObject;
    isSelected;
    constructor(p1, p2, name, color, conversionFactor, units, fabricCanvas, imageIdentifier){
        this.p1 = p1;
        this.p2 = p2;
        this.name = name;
        this.color = color;
        this.distance = Math.sqrt(Math.pow(this.p2.x - this.p1.x, 2) + Math.pow(this.p2.y - this.p1.y, 2));
        this.conversionFactor = conversionFactor; // pixels * conversionFactor = actual measurement
        this.units = units;
        // convert to proper units
        this.distance *= conversionFactor;
        this.fabricCanvas = fabricCanvas;
        this.imageIdentifier = imageIdentifier;
        this.isSelected = false;
    }
     adjustToZoom(zoom) {
        this.p1.adjustToZoom(zoom);
        this.p2.adjustToZoom(zoom);
        this.line.strokeWidth = 50 / zoom;
        this.textObject.fontSize = 300 / zoom;
        // adjust distance between right-most point and text
        this.textObject.left = Math.max(this.p1.x, this.p2.x) + 100 / zoom;
    }
     remove() {
        this.p1.remove();
        this.p2.remove();
        this.fabricCanvas.remove(this.line);
        this.fabricCanvas.remove(this.textObject);
    }
     render(zoom) {
        // draw line between p1 and p2
        this.line = new fabric.Line([
            this.p1.x,
            this.p1.y,
            this.p2.x,
            this.p2.y
        ], {
            originX: "center",
            originY: "center",
            stroke: this.color,
            strokeWidth: 50 / zoom
        });
        this.fabricCanvas.add(this.line);
        // create text object to display measurement
        let text = this.distance.toFixed(3) + " " + this.units;
        this.textObject = new fabric.Text(text, {
            left: Math.max(this.p1.x, this.p2.x) + 100 / zoom,
            top: this.p1.x > this.p2.x ? this.p1.y : this.p2.y,
            fontSize: 300 / zoom,
            fill: this.color
        });
        this.fabricCanvas.add(this.textObject);
    }
    // Add methods to select and deselect the measurement
    select() {
        this.line.set({
            stroke: "grey"
        });
        // Highlight both points with a grey fill
        this.p1.fabricObject.set({ fill: "grey" });
        this.p2.fabricObject.set({ fill: "grey" });

        this.textObject.set({ fill: "grey" });
        this.fabricCanvas.renderAll();
    }

    deselect() {
        this.line.set({
            stroke: this.color
        });
        this.p1.fabricObject.set({ fill: this.color });
        this.p2.fabricObject.set({ fill: this.color });

        this.textObject.set({ fill: this.color });
        this.fabricCanvas.renderAll();
    }
 // Add a method to check if a point is inside the measurement
     isPointInside(x, y) {
         const minX = Math.min(this.p1.x, this.p2.x);
         const maxX = Math.max(this.p1.x, this.p2.x);
         const minY = Math.min(this.p1.y, this.p2.y);
         const maxY = Math.max(this.p1.y, this.p2.y);

         return x >= minX && x <= maxX && y >= minY && y <= maxY;
     }
}
 class $9aede8581b16c941$var$Point {
    x;
    y;
    color;
    fabricCanvas;
    fabricObject;
    imageIdentifier;
     constructor(x, y, color, fabricCanvas, imageIdentifier){
        this.x = x;
        this.y = y;
        this.color = color;
        this.fabricCanvas = fabricCanvas;
        this.imageIdentifier = imageIdentifier;
        // create the fabric.js object for rendering
        this.fabricObject = new fabric.Circle({
            originX: "center",
            originY: "center",
            left: this.x,
            top: this.y,
            fill: this.color,
            radius: 150
        });
    }
    adjustToZoom(zoom) {
        this.fabricObject.setRadius(150 / (zoom * 1.5));
    }
    remove() {
        this.fabricCanvas.remove(this.fabricObject);
    }
     render(zoom) {
        this.adjustToZoom(zoom); // needs to be called first for some silly reason
        this.fabricCanvas.add(this.fabricObject);
    }
}
 class $9aede8581b16c941$var$ButtonBar {
    plugin;
    element;
    undoButton;
    redoButton;
    resetButton;
    exportButton;
    deleteButton;
     constructor(plugin){
        this.plugin = plugin;
        this.element = document.createElement("div");
        this.undoButton = document.createElement("input");
        this.undoButton.setAttribute("type", "button");
        this.undoButton.setAttribute("value", "undo (ctrl + z)");
        this.setButtonStyle(this.undoButton);
        this.undoButton.addEventListener("click", ()=>{
            this.plugin.undo();
        });
        this.element.appendChild(this.undoButton);
        this.redoButton = document.createElement("input");
        this.redoButton.setAttribute("type", "button");
        this.redoButton.setAttribute("value", "redo (ctrl + y)");
        this.setButtonStyle(this.redoButton);
        this.redoButton.addEventListener("click", ()=>{
            this.plugin.redo();
        });
        this.element.appendChild(this.redoButton);
        this.resetButton = document.createElement("input");
        this.resetButton.setAttribute("type", "button");
        this.resetButton.setAttribute("value", "reset (ctrl + r)");
        this.setButtonStyle(this.resetButton);
        this.resetButton.addEventListener("click", ()=>{
            if (window.confirm("Are you sure you want to reset all measurements and annotations?")) this.plugin.clear();
        });
        this.element.appendChild(this.resetButton);
        this.exportButton = document.createElement("input");
        this.exportButton.setAttribute("type", "button");
        this.exportButton.setAttribute("value", "export csv (ctrl + s)");
        this.setButtonStyle(this.exportButton);
        this.exportButton.addEventListener("click", ()=>{
            this.plugin.exportCSV();
        });
        this.element.appendChild(this.exportButton);
        // Create a "Delete" button
        this.deleteButton = document.createElement("input");
        this.deleteButton.setAttribute("type", "button");
        this.deleteButton.setAttribute("value", "delete (ctrl + d)");
        this.setButtonStyle(this.deleteButton);
        this.deleteButton.addEventListener("click", () => {
            this.plugin.deleteSelectedMeasurement();
        });
        this.element.appendChild(this.deleteButton);
    }
     setButtonStyle(button) {
        let style = button.style;
        style.setProperty("color", "white");
        style.setProperty("background-color", "black");
        style.setProperty("width", "100%");
        style.setProperty("height", "25px");
    }
}
 class $9aede8581b16c941$var$MeasurementList {
    plugin;
    element;
    listItems = [];
     constructor(plugin){
        this.plugin = plugin;
        this.element = document.createElement("ul");
        this.element.style.setProperty("list-style", "none");
        // add new list item when measurement added
        document.addEventListener("measurement-added", this.addLatestMeasurement.bind(this));
        document.addEventListener("measurement-removed", this.removeLatestMeasurement.bind(this));
        document.addEventListener("measurements-reset", this.resetMeasurements.bind(this));
        document.addEventListener("data-loaded", this.addAllMeasurements.bind(this));
        document.addEventListener("delete-selected-measurement", (event) => {
                    this.removeSelectedMeasurement(event.detail.measurement);
                });
    }
    addAllMeasurements() {
        for(let i = 0; i < this.plugin.measurements.length; i++){
            let measurement = this.plugin.measurements[i];
            let listItem = new $9aede8581b16c941$var$MeasurementListItem(this.plugin, measurement);
            this.listItems.push(listItem);
            this.element.appendChild(listItem.element);
        }
    }
    addLatestMeasurement() {
        let measurement = this.plugin.measurements[this.plugin.measurements.length - 1];
        let listItem = new $9aede8581b16c941$var$MeasurementListItem(this.plugin, measurement);
        this.listItems.push(listItem);
        this.element.appendChild(listItem.element);
    }
     addToDocument() {
        document.appendChild(this.element);
        this.plugin.viewer.element.appendChild(this.element);
    }
     removeLatestMeasurement() {
        this.element.removeChild(this.listItems.pop().element);
    }
     resetMeasurements() {
        for(let i = 0; i < this.listItems.length; i++)this.element.removeChild(this.listItems[i].element);
        this.listItems = [];
    }
    // Add a method to remove a specific measurement from the list
    removeSelectedMeasurement(measurement) {
        const measurementId = measurement.id;
        const indexToRemove = this.listItems.findIndex(item => item.measurement.id === measurementId);
        console.log(indexToRemove);
        if (indexToRemove !== -1) {
            this.element.removeChild(this.listItems[indexToRemove].element);
            this.listItems.splice(indexToRemove, 1);
        }
    }

}
class $9aede8581b16c941$var$MeasurementListItem {
    plugin;
    measurement;
    element;
    nameField;
    lengthDisplay;
 constructor(plugin, measurement){
        this.plugin = plugin;
        this.measurement = measurement;
        this.element = document.createElement("li");
        this.nameField = document.createElement("input");
        this.nameField.setAttribute("type", "text");
        this.nameField.value = this.measurement.name;
        this.nameField.addEventListener("input", this.updateName.bind(this));
        this.setNameFieldStyle();
        this.element.appendChild(this.nameField);
        this.lengthDisplay = document.createElement("span");
        this.lengthDisplay.innerText = `: ${this.measurement.distance.toFixed(3)} ${this.measurement.units}`;
        this.element.appendChild(this.lengthDisplay);
    }
    setNameFieldStyle() {
        let style = this.nameField.style;
        style.setProperty("background", "transparent");
        style.setProperty("border", "none");
        style.setProperty("color", "white");
        style.setProperty("text-align", "right");
        style.setProperty("width", "50%");
    }
    updateName() {
        this.measurement.name = this.nameField.value;
        this.plugin.saveInLocalStorage();
    }
}
class $9aede8581b16c941$var$Menu {
    plugin;
    /**
     * HTML elements
     */ element;
    colorSelector;
    measurementList;
    buttonBar;
     constructor(plugin){
        this.plugin = plugin;
        // create menu container
        this.element = document.createElement("div");
        this.element.setAttribute("hidden", "hidden"); // start hidden until user opens
        this.setMenuStyle();
        // create color selector
        this.colorSelector = document.createElement("input");
        this.colorSelector.setAttribute("type", "color");
        // handler for changing color
        this.colorSelector.addEventListener("change", this.handleColorChange.bind(this), false);
        this.setColorSelectorStyle();
        this.element.appendChild(this.colorSelector);
        // create measurement list
        this.measurementList = new $9aede8581b16c941$var$MeasurementList(this.plugin);
        this.element.appendChild(this.measurementList.element);
        // create button bar
        this.buttonBar = new $9aede8581b16c941$var$ButtonBar(this.plugin);
        this.element.appendChild(this.buttonBar.element);
        // set starting color after data loaded (color maintained upon restarting)
        document.addEventListener("data-loaded", this.updateColor.bind(this));
    }
     addToDocument() {
        document.body.appendChild(this.element);
        // append to the viewer's element so menu will stay visible in fullscreen
        this.plugin.viewer.element.appendChild(this.element);
    }
     handleColorChange() {
        let color = this.colorSelector.value;
        this.plugin.setMeasurementColor(color);
    }
     setColorSelectorStyle() {
        let style = this.colorSelector.style;
        style.setProperty("width", "100%");
        style.setProperty("height", "30px");
        style.setProperty("border", "none");
        style.setProperty("padding", "0px");
    }
     setMenuStyle() {
        let style = this.element.style;
        // positioning
        style.setProperty("position", "absolute");
        style.setProperty("text-align", "left");
        style.setProperty("top", "10%");
        style.setProperty("right", "0%");
        style.setProperty("z-index", "2");
        // sizing
        style.setProperty("width", "20%");
        style.setProperty("padding", "1%");
        // coloring and opacity
        style.setProperty("background", "rgba(0, 0, 0, 0.75)");
        style.setProperty("color", "white"); // text color

        style.setProperty("overflow-y", "auto");
        style.setProperty("height", "600px");
    }
     updateColor() {
        let color = this.plugin.measurementColor;
        this.colorSelector.value = color;
        this.plugin.setMeasurementColor(color);
    }
}
 class $9aede8581b16c941$var$MenuButton {
    plugin;
    element;
    constructor(plugin){
        this.plugin = plugin;
        this.element = document.createElement("img");
        this.element.setAttribute("tabindex", "0"); // allow tabbing
        this.element.setAttribute("src", "img/hamburger-50.png");
        this.setupStyle();
    }
     addToDocument() {
        document.body.appendChild(this.element);
        // appending to viewer so icon displays in fullscreen mode
        this.plugin.viewer.element.appendChild(this.element);
    }
     setupStyle() {
        let style = this.element.style;
        // need to set background color for visibility
        style.setProperty("background-color", "white");
        // positioning - set in top right
        style.setProperty("position", "absolute");
        style.setProperty("top", "0%");
        style.setProperty("right", "0%");
        style.setProperty("z-index", "1");
        // pointer cursor so the user knows they can click
        style.setProperty("cursor", "pointer");
    }
}
 class $9aede8581b16c941$var$UI {
    plugin;
    menuButton;
    menu;
    constructor(plugin, options = {}){
        this.plugin = plugin;
        this.setBodyStyle();
        // setup menu and icon
        this.menuButton = new $9aede8581b16c941$var$MenuButton(plugin, options);
        this.menu = new $9aede8581b16c941$var$Menu(plugin, options);
        // wire menu to open when icon clicked
        this.menuButton.element.addEventListener("click", this.toggleMenu.bind(this));
    }
     addToDocument() {
        this.menuButton.addToDocument();
        this.menu.addToDocument();
    }
    toggleMenu() {
        if (this.menu.element.getAttribute("hidden") == "hidden") this.menu.element.removeAttribute("hidden");
        else this.menu.element.setAttribute("hidden", "hidden");
    }
    setBodyStyle() {
        let style = document.body.style;
        style.setProperty("overflow", "hidden", "important");
        style.setProperty("background-color", "black");
        style.setProperty("font-size", "0.9em");
    }
}
